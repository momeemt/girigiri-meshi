// Package apiio provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package apiio

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Location defines model for Location.
type Location struct {
	// Latitude 緯度
	Latitude float64 `json:"latitude"`

	// Longtitude 経度
	Longtitude float64 `json:"longtitude"`
}

// Restaurant defines model for Restaurant.
type Restaurant struct {
	CloseTime time.Time `json:"closeTime"`
	Location  Location  `json:"location"`

	// Name name of the restaurant
	Name     string  `json:"name"`
	PhotoUrl *string `json:"photoUrl,omitempty"`

	// PlaceId This id is based on Google Places API
	PlaceId string   `json:"placeId"`
	Rating  *float64 `json:"rating,omitempty"`
}

// GetRestaurantsJSONRequestBody defines body for GetRestaurants for application/json ContentType.
type GetRestaurantsJSONRequestBody = Location

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRestaurants request with any body
	GetRestaurantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetRestaurants(ctx context.Context, body GetRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRestaurantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRestaurantsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRestaurants(ctx context.Context, body GetRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRestaurantsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRestaurantsRequest calls the generic GetRestaurants builder with application/json body
func NewGetRestaurantsRequest(server string, body GetRestaurantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRestaurantsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetRestaurantsRequestWithBody generates requests for GetRestaurants with any type of body
func NewGetRestaurantsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRestaurants request with any body
	GetRestaurantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error)

	GetRestaurantsWithResponse(ctx context.Context, body GetRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error)
}

type GetRestaurantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Restaurant
}

// Status returns HTTPResponse.Status
func (r GetRestaurantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRestaurantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRestaurantsWithBodyWithResponse request with arbitrary body returning *GetRestaurantsResponse
func (c *ClientWithResponses) GetRestaurantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error) {
	rsp, err := c.GetRestaurantsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRestaurantsResponse(rsp)
}

func (c *ClientWithResponses) GetRestaurantsWithResponse(ctx context.Context, body GetRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error) {
	rsp, err := c.GetRestaurants(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRestaurantsResponse(rsp)
}

// ParseGetRestaurantsResponse parses an HTTP response from a GetRestaurantsWithResponse call
func ParseGetRestaurantsResponse(rsp *http.Response) (*GetRestaurantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRestaurantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search for nearby restaurant
	// (POST /restaurants)
	GetRestaurants(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurants(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/restaurants", wrapper.GetRestaurants)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RUX2sbRxD/Ksu2j/pzkizLFphiO64iy38S+Z/s1pjV3dzdyne769092aegB7mQFlJK",
	"05f0oU8tJFBKQx9CIZR+GWE3/hZl71zrHDnU0YPYm92Z+c1vZn5PsM1DwRkwrXD9CVa2DyFJjmvcJppy",
	"Zs5CcgFSU0huAqKpjhwwZweULalIH+J//nx98fYlzmE4I6EIANcr1UJ1rlyrlmo57HIZEo3r2OFRNwCc",
	"wzoWgOuYRWEXJB7mcMCZ98Hgb759L3hpxiqUKuVauTp7j+jDHJZwElEJDq5/ManiVtbDGzfe7YGtDag2",
	"KE0iSZie5sIOuIJtGiZ4JxCIhrw21ptwSkvKvLTGCbGfSnBxHX9SnLSheN2D4k0DhjnMSHgHI8aKuIu0",
	"D0hOQGYYwlffv0Hvfvz68pvnlz/9dvH2xV2AhM8135GBSTDx9LUWql4shkSogse5FwARVBVsHia2IhG0",
	"KAJiQzEJ8FlIzk6po/2FkmVZX0aWVZ5NLo4kuCCB2bCwuFexNh4Mag961cbxitpmrcYS6LbbbOUbJ/7u",
	"xuBoebERR5uqc7SzPHdydLB0tL62J6u7/mbca+XlYGm+dOButCog6HGrE9PYi0hXdDaX9tqx2JnZcEpz",
	"fJ5oH1qD/Of9+U378ezu/lanc9Jb3YJo7nT1oeXn9/d21097Kw/PyjBYrOl+qz+je21vnszFa2eV7Za3",
	"erDS8IOzaj5SM+tpJccQL3Tu97uTYsNT05lu4bZPFaIOogp1iQIHcYYaCdnokfFRaPFR81ZHl/3mKmxt",
	"k/bjvW4zXGwP2LpabuzCvn16V2ZJtDllW1sp1D5+XZIJzAxvLjP6k/qm18fEoczl06WPz38ff/Xr9f/o",
	"1dWrp+PR83d//zU+H43Pn1398vrij2fj8x8uv/t5PHoxHr388Pvz8eipKYDqhKEGldSjkq6D8inO4T5I",
	"laa0CqWCZVjhAhgRFNdxpWAVKqYCov1ko4uTTUq+BVd6GnwDNCIooEqbBWRAZDfO7KBCruQhyrBlRCM5",
	"mykw7u1MmpRqUHqJO3EiK5xpSPWGCBHQNEyxp1LZSCXi/gJyu5laRpAYlOBMpTpWtqyPyks1hOr/AGSE",
	"c3gzGERKEqeQblO6Fdk2KOVGAbohy/hVU2i3HzeZBslIgBTIPkgEUvJ0aFUUhkTGJiAQafvI5XK6QWZc",
	"iKfMZGeMhwms64v3U670Qcbap8xDpMsjfUfX8X9KnQ06PBz+GwAA//8NzKYhZwcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
