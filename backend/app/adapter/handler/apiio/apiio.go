// Package apiio provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package apiio

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Location defines model for Location.
type Location struct {
	// Latitude 緯度
	Latitude float64 `json:"latitude"`

	// Longitude 経度
	Longitude float64 `json:"longitude"`
}

// Restaurant defines model for Restaurant.
type Restaurant struct {
	CloseTime time.Time `json:"closeTime"`
	Location  Location  `json:"location"`

	// Name name of the restaurant
	Name string `json:"name"`

	// PhotoUrl Photo url. Returned on /restaurants
	PhotoUrl *string `json:"photoUrl,omitempty"`

	// PlaceId This id is based on Google Places API
	PlaceId string   `json:"placeId"`
	Rating  *float64 `json:"rating,omitempty"`
}

// RestaurantDetail defines model for RestaurantDetail.
type RestaurantDetail struct {
	// PhotoUrls Array of photoUrl. Returned on /restaurants/details?placeId=XXXX
	PhotoUrls *[]string `json:"photoUrls,omitempty"`
	PlaceId   *string   `json:"placeId,omitempty"`
	Reviews   *[]Review `json:"reviews,omitempty"`

	// Url Url to the page google ownes related to the page. This must be embedded if exists.
	Url *string `json:"url,omitempty"`

	// UserRatingsTotal number of user userRatingsTotal
	UserRatingsTotal *int `json:"userRatingsTotal,omitempty"`

	// Website Url to the official page of the restaurant.
	Website *string `json:"website,omitempty"`
}

// Review defines model for Review.
type Review struct {
	// AuthorName name of the review author_name
	AuthorName string `json:"author_name"`

	// ProfilePhotoUrl url to the author's profile photo
	ProfilePhotoUrl *string `json:"profilePhotoUrl,omitempty"`

	// Rating rating by the user
	Rating int `json:"rating"`

	// Text the main text of the review
	Text string `json:"text"`

	// Time when the review was written
	Time *time.Time `json:"time,omitempty"`
}

// GetRestaurantDetailParams defines parameters for GetRestaurantDetail.
type GetRestaurantDetailParams struct {
	// PlaceId the place id for the restaurant you want the detail of
	PlaceId string `form:"placeId" json:"placeId"`
}

// GetRestaurantsJSONRequestBody defines body for GetRestaurants for application/json ContentType.
type GetRestaurantsJSONRequestBody = Location

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRestaurants request with any body
	GetRestaurantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetRestaurants(ctx context.Context, body GetRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRestaurantDetail request
	GetRestaurantDetail(ctx context.Context, params *GetRestaurantDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRestaurantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRestaurantsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRestaurants(ctx context.Context, body GetRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRestaurantsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRestaurantDetail(ctx context.Context, params *GetRestaurantDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRestaurantDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRestaurantsRequest calls the generic GetRestaurants builder with application/json body
func NewGetRestaurantsRequest(server string, body GetRestaurantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRestaurantsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetRestaurantsRequestWithBody generates requests for GetRestaurants with any type of body
func NewGetRestaurantsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRestaurantDetailRequest generates requests for GetRestaurantDetail
func NewGetRestaurantDetailRequest(server string, params *GetRestaurantDetailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "placeId", runtime.ParamLocationQuery, params.PlaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRestaurants request with any body
	GetRestaurantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error)

	GetRestaurantsWithResponse(ctx context.Context, body GetRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error)

	// GetRestaurantDetail request
	GetRestaurantDetailWithResponse(ctx context.Context, params *GetRestaurantDetailParams, reqEditors ...RequestEditorFn) (*GetRestaurantDetailResponse, error)
}

type GetRestaurantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Restaurant
}

// Status returns HTTPResponse.Status
func (r GetRestaurantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRestaurantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRestaurantDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestaurantDetail
}

// Status returns HTTPResponse.Status
func (r GetRestaurantDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRestaurantDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRestaurantsWithBodyWithResponse request with arbitrary body returning *GetRestaurantsResponse
func (c *ClientWithResponses) GetRestaurantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error) {
	rsp, err := c.GetRestaurantsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRestaurantsResponse(rsp)
}

func (c *ClientWithResponses) GetRestaurantsWithResponse(ctx context.Context, body GetRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error) {
	rsp, err := c.GetRestaurants(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRestaurantsResponse(rsp)
}

// GetRestaurantDetailWithResponse request returning *GetRestaurantDetailResponse
func (c *ClientWithResponses) GetRestaurantDetailWithResponse(ctx context.Context, params *GetRestaurantDetailParams, reqEditors ...RequestEditorFn) (*GetRestaurantDetailResponse, error) {
	rsp, err := c.GetRestaurantDetail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRestaurantDetailResponse(rsp)
}

// ParseGetRestaurantsResponse parses an HTTP response from a GetRestaurantsWithResponse call
func ParseGetRestaurantsResponse(rsp *http.Response) (*GetRestaurantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRestaurantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRestaurantDetailResponse parses an HTTP response from a GetRestaurantDetailWithResponse call
func ParseGetRestaurantDetailResponse(rsp *http.Response) (*GetRestaurantDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRestaurantDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestaurantDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search for nearby restaurant
	// (POST /restaurants)
	GetRestaurants(ctx echo.Context) error
	// Details for restaurant
	// (GET /restaurants/details)
	GetRestaurantDetail(ctx echo.Context, params GetRestaurantDetailParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurants(ctx)
	return err
}

// GetRestaurantDetail converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurantDetail(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRestaurantDetailParams
	// ------------- Required query parameter "placeId" -------------

	err = runtime.BindQueryParameter("form", true, true, "placeId", ctx.QueryParams(), &params.PlaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter placeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurantDetail(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/restaurants", wrapper.GetRestaurants)
	router.GET(baseURL+"/restaurants/details", wrapper.GetRestaurantDetail)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXbW8TRxD+K6trpX4xfkkwQZZQlQRITUkUTCipKoT27sa+Te5uL7t7dgyyxF0KhYaX",
	"Aqpoq0qoBUEFFahCqC0q8GMWB/Ivqt0z9jm+pIFKlfrFWu3tzjzzzDOz47OGRb2A+uALblTOGtxywMN6",
	"eZRaWBDqq3XAaABMENBfXCyICG1Qaxu4xUiQHDRe//64++yekTNgFXuBC0ZlvJwv7x+bKJcmckadMg8L",
	"o2LYNDRdMHKGaAdgVAw/9ExgRidnuNRvbGf76eUttkt7i/nS+NjEWHnfLox3cgaDlZAwsI3KF4Mg0k5P",
	"9W9RcwksoSDVgAscMuyLUSYsl3JYIJ6GO0CABewRardvjgtG/EYS4YDWDxnUjYrxQWGQhEIvA4U+/Z2c",
	"4WMvgxC1i2gdCQcQG4BMEWRsfvMUvfnuq42L1zd+/LX77FYWoMChgp5g7qiDefUFhczNoxqIkPlgI+qj",
	"wsAZH/LmCBHwSqHgOuP5BqUNF0IOzKK+AF/kLeoVAhdbwAuTRw4eXtpbnGJzTbY03Wof9tuhOOOcXJii",
	"9j6PHTo6N8Enp1ZL4ydLn4wFh3mx6lVXGBNTuFr2Tx89NjVba67Yy21zZXlp/8q0LeZaZNqsz/HG5PIJ",
	"c7nJy25IZicP8NK+YnFPq1QsFjMjV2iq9mjgCw7hiNiIcGRinkQ9owNC8zoCNDlfHQp92qkegeMLuHbs",
	"pFn1Jmtn/Fk+PfMZfG61sjwzLNSqcjZVKPmJdxexFkZKU7mUIgfx7azqgyAwcUe1/VYXfJSfScZwW0nv",
	"7ZntBVKwtXn+cQ/MgcXFxUUjZxABHh8i4H8nn94GVmRskdP7CwOaBFqamD5DO3WJmj6fhSbMqugTzEWC",
	"6o4R4AaghGZEWz5wxMDFAuz0gTzSpeCFXCATEHgm2DbYiNQRrBIueD4rCJW2mlY4X6ACZ+BI5KwUpM6i",
	"kQup0ipPTPRdEF9AI3koWmByImDHEGm9TiyC3STWkU6Zgb2TWSma4pH6wKFwKDu9m96sDKD0+XTr+BQL",
	"Hnoks0ExWicuzG/bocNBsIn5jzjqXUpqc+fmM2ws2UdmW9tTOUnj3JuVBQGrYtSQuu5h4iP1eZiFocjV",
	"m/T8powevn5xtXv9iYxuyehLeS5+9fxbGa13796X0RUZPZDxXbn2vVx7ItcuyuhR99IVGT2U0ePuy/My",
	"+mHzzm0Z/SnjdXX9XCSjmzK+LOMbvf3otowvKYNx3H25tnleG9Reuud/kdG9V398vXFpXUbX3vx0WUbX",
	"5Lk4s9RJVpJbDvjpDLcwRy1GhADViXczDmxp58MS6eVJHVHDSlO39YMpBD3+R9u7skv8Oh2FLONHcu1B",
	"7ze6v3n/goyuv3nxl4wjGa9v3nnc/W1dxjc2rv6ss3Fv+/OxjC4oBEToXM4QRhqEkVngjtJyExhPXBbz",
	"pXxRkUgD8HFAjIoxni/mx9UDhYWja2lopFCVRnmGrmZAIIxcwrWofMDMbKfqmaM6ox5KPYaqXPVadWV1",
	"vTY0uSjqgYsparf1MJe8NLq2g8AliZnCEk+GtaTl7n5sG06uYCHoDR5QnycdZKxYfCe/u3wR+pPgyKug",
	"IA1Tejy0LOC8HrqoT5a6V06gDR+u+gKYj13EgTWBIWCMJjMJDz0Ps7YyCJhZDqpTNpogJRfc4Erpqc1T",
	"ykDWyKAANEDzskMie+PLv6R2d4z2fP0XPCauuCbynxlUpcSwBwKY+pjVkPV0ooZaZXH4IURtGqKWWqj9",
	"hH1E62pKU7dXQmBt4+2/kP6Ys1XduRSd7zn/dLQWehFuDeJQE1hbOOqJwiYNRUYDGIBMsdM51fk7AAD/",
	"/5S7OLrmDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
