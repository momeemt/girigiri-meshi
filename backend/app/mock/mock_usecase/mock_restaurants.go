// Code generated by MockGen. DO NOT EDIT.
// Source: restaurants.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/momeemt/2000s/domain/model"
)

// MockRestaurants is a mock of Restaurants interface.
type MockRestaurants struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantsMockRecorder
}

// MockRestaurantsMockRecorder is the mock recorder for MockRestaurants.
type MockRestaurantsMockRecorder struct {
	mock *MockRestaurants
}

// NewMockRestaurants creates a new mock instance.
func NewMockRestaurants(ctrl *gomock.Controller) *MockRestaurants {
	mock := &MockRestaurants{ctrl: ctrl}
	mock.recorder = &MockRestaurantsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurants) EXPECT() *MockRestaurantsMockRecorder {
	return m.recorder
}

// GetAvailableRestaurants mocks base method.
func (m *MockRestaurants) GetAvailableRestaurants(arg0 model.Location, arg1 time.Time) ([]model.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRestaurants", arg0, arg1)
	ret0, _ := ret[0].([]model.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRestaurants indicates an expected call of GetAvailableRestaurants.
func (mr *MockRestaurantsMockRecorder) GetAvailableRestaurants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRestaurants", reflect.TypeOf((*MockRestaurants)(nil).GetAvailableRestaurants), arg0, arg1)
}
